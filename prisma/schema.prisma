generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("VPS_POSTGRES_URL")
  directUrl = env("VPS_POSTGRES_URL")
}


model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model fulfillments {
  id                 Int               @id @default(autoincrement())
  order_id           Int?
  tracking_number    String?           @db.VarChar(100)
  courier_name       String?           @db.VarChar(100)
  courier_code       String?           @db.VarChar(100)
  status             String?           @db.VarChar(50)
  delivered_at       DateTime?         @db.Timestamp(6)
  estimated_delivery DateTime?         @db.Date
  last_checked_at    DateTime?         @db.Timestamp(6)
  created_at         DateTime?         @default(now()) @db.Timestamp(6)
  meta_data          Json?
  orders             orders?           @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tracking_events    tracking_events[]
}

model orders {
  id                Int                 @id @default(autoincrement())
  shop_id           Int?
  shopify_order_id  BigInt
  order_number      String?             @db.VarChar(100)
  customer_name     String?             @db.VarChar(255)
  customer_phone    String?             @db.VarChar(20)
  status            String?             @db.VarChar(50)
  placed_at         DateTime?           @db.Timestamp(6)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  meta_data         Json?
  fulfillments      fulfillments[]
  stores            stores?             @relation(fields: [shop_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  whatsapp_messages whatsapp_messages[]
}

model stores {
  id                Int                 @id @default(autoincrement())
  shopify_domain    String              @unique @db.VarChar(255)
  store_name        String?             @db.VarChar(255)
  email             String?             @db.VarChar(255)
  whatsapp_enabled  Boolean?            @default(false)
  qr_connected      Boolean?            @default(false)
  session_path      String?             @db.VarChar(255)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  meta_data         Json?
  orders            orders[]
  webhook_events    webhook_events[]
  whatsapp_messages whatsapp_messages[]
  whatsapp_sessions whatsapp_sessions[]
}

model tracking_events {
  id             Int           @id @default(autoincrement())
  fulfillment_id Int?
  status         String?       @db.VarChar(50)
  status_code    String?       @db.VarChar(50)
  location       String?       @db.VarChar(255)
  timestamp      DateTime?     @db.Timestamp(6)
  meta_data      Json?
  fulfillments   fulfillments? @relation(fields: [fulfillment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model webhook_events {
  id              Int       @id @default(autoincrement())
  store_id        Int?
  event_type      String?   @db.VarChar(100)
  order_id        String?   @db.VarChar(100)
  tracking_number String?   @db.VarChar(100)
  tracking_url    String?
  payload         Json?
  timestamp       DateTime? @default(now()) @db.Timestamp(6)
  status          String?   @db.VarChar(20)
  meta_data       Json?
  stores          stores?   @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([store_id], map: "idx_webhook_events_store_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model whatsapp_messages {
  id             Int       @id @default(autoincrement())
  store_id       Int?
  order_id       Int?
  customer_phone String?   @db.VarChar(20)
  message        String?
  status         String?   @db.VarChar(20)
  attempt_count  Int?      @default(0)
  error_log      String?
  timestamp      DateTime? @default(now()) @db.Timestamp(6)
  meta_data      Json?
  orders         orders?   @relation(fields: [order_id], references: [id], onUpdate: NoAction)
  stores         stores?   @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model whatsapp_sessions {
  id           Int       @id @default(autoincrement())
  store_id     Int?
  client_id    String    @unique @db.VarChar(255)
  status       String?   @db.VarChar(20)
  session_path String?   @db.VarChar(255)
  last_seen    DateTime? @db.Timestamp(6)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  meta_data    Json?
  stores       stores?   @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
